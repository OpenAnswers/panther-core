/*
 * Copyright (C) 2022, Open Answers Ltd http://www.openanswers.co.uk/
 * All rights reserved.
 * This file is subject to the terms and conditions defined in the Software License Agreement.
 */

// Logging
var logging = require('oa-logging')('oa:event:monitors:rules:heartbeat');
var logger = logging.logger;
var debug = logging.debug;

var oldsyslog = require('../lib/syslog/parser');
var syslog = require('./syslog.rules');

var test = 0;
/*
 * export.rules( a, obj )
 * a: (alert)
 * the alert that we are constructing, its an object that you can set
 * properties on.  properties are mostly the standard field names that
 * are defined in mongodb, you can find out what they are with:
 *
 * $ mongo oa
 * > db.alertdefinitions.find( {}, {column:1, _id:0});
 *
 * obj: (raw event)
 * This is the raw event that has been collected and generated by the
 * probe.  for the IMAP (aka esupport) probe the following
 * properties are available from this object:
 *
 *
 * obj.imap_id  <unique IMAP id>
 * obj.from     <From: field of the email>
 * obj.to       <To: field of the email>
 * obj.subject  <Subject: field of the email>
 * obj.date_obj <Date: field of the email, parsed into JS object>
 * obj.date_raw <Date: field of the email, as the original string>
 * obj.body     <The body of the message as it was originally received>
 *
 */

exports.rules = function (a, obj) {
  /*
   * what happens when a messages has been retrieved
   */
  debug('message retrieved', obj);

  var $uid = obj.imap_id;

  var $subject = obj.subject || '';
  var $from = obj.from || '';
  var $body = obj.body || '';
  a.last_occurrence = obj.date_obj;
  a.node = obj.from;

  /*
   * its rather helpful to be able to look at specific lines
   * inside the body of the message, so we split it here
   * into an array of lines
   */

  var $lines = $body.split('\r\n');

  a.agent_group = 'EMAIL';
  a.proxy_agent = 'esupport';
  a.acknowledged = false;

  /*
   * start with a poor identifier value that's fairly unique to begin with
   * this should get overwritten later on as we work out what the event is
   * and we construct a more meaningful value for the identifier
   */
  a.identifier = obj.imap_id;
  a.summary = obj.subject;
  a.severity = 1;

  /*
   * what now follows is a rather large if..then..elseif.... block
   * essentially, what we are doing here is looking for certain patterns
   * usually starting with the emails "Subject:" and then looking closer
   * at the body to work out what it means
   */
  var $a;
  if (($a = $subject.match(/^SiteScope Alert, (\w+), (.*)/))) {
    /*
     * e.g.
     * SiteScope Alert, warning, Locked table count, value=5 (10.103.116.66)
     */
    var sitescope_severity = $a[1];
    var sitescope_summary = $a[2];
    var sitescope_monitor = '';
    var $aa;

    a.identifier = 'SSA:' + sitescope_severity;
    switch (sitescope_severity) {
      case 'error':
        a.severity = 4;
        break;
      case 'warning':
        a.severity = 3;
        break;
    }
    for (var l in $lines) {
      var $b;
      if (($b = $lines[l].match(/^Group:\s+(\w+)/))) {
        a.alert_group = $b[1];
        a.identifier += ':' + a.alert_group;
      } else if (($b = $lines[l].match(/^Monitor:\s+(\w+)/))) {
        sitescope_monitor = $b[1];
        a.identifier += ':' + sitescope_monitor;
        a.summary = sitescope_monitor;
        if (sitescope_monitor.match(/^Kenya/)) {
          a.customer = 'Camelot';
        }
      }
    }

    if (($aa = sitescope_summary.match(/^(.*), Content Match Error \(([\w\.]+)\)/))) {
      a.node = $aa[2];
      logger.info('SiteScope match: ' + a.node);
      switch ($aa[1]) {
        case 'Locked table count':
          a.identifier += ':LockedTable';
          break;

        default:
          if (($aa = sitescope_summary.match(/OA Amanda Backup (\w+) report/))) {
            a.customer = 'Open Answers';
            a.alert_group = 'Backups';
            a.alert_key = $aa[1];

            a.identifier += ':Amanda:' + $aa[1];
            a.summary = 'Amanda backup ' + $aa[1] + ' ' + a.severity;
          }
          break;
      }
    } else if (($aa = sitescope_summary.match(/^rsync from (\w+) to (\w+), Content Match Error/))) {
      var from = $aa[1];
      var to = $aa[2];
      a.alert_key = from + '/' + to;

      a.identifier += ':rsync:' + from + ':' + to;
    } else if (($aa = sitescope_summary.match(/Locked table count, value=(\d+) .*/))) {
      a.identifier += ':LockedTable';
      a.summary = sitescope_summary;
      a.alert_key = $aa[1];
    }
  } else if (($a = $subject.match(/^OA#(\d+) (.*)/))) {
    a.external_class = 'oatime';
    a.external_id = $a[1];
    a.identifier = 'OA:' + $a[1];
    var $b;
    if (($b = $subject.match(/^OA#\d+ (\S+) backup (\S+)/))) {
      a.alert_group = 'Backups';
      a.node = $b[1];
      a.identifier += ':backup';

      if ($b[2] == 'problem') {
        a.severity = 4;
        var $c;
        if (($c = $lines[0].match(/^tar failure (\S+), return_code=(\d+)/))) {
          a.alert_key = $c[1];
          a.summary = 'Backup failure of ' + $c[1];
          a.identifier += ':' + $c[1];
        }
      }
    }
  } else if (($a = $subject.match(/^P(\d) (\S+) ([SG]) ((\d+)|(\d+)\/(\d+))(|\((\d+)\)) (.*)/))) {
  /*
   * the following regex should match:
   * P4 oaxgs02 G 15998 messages file
   *   [1] = 4
   *   [2] = oaxgs02
   *   [3] = G
   *   [4] = 15998
   *   [5] = 15998
   *   [6] = undefined
   *   [7] = undefined
   *   [8] = ''
   *   [9] = undefined
   *  [10] = messages file
   *
   * P4 oaxgs36 G 15998(15) messages file
   *   [1] = 4
   *   [2] = oaxgs36
   *   [3] = G
   *   [4] = 15998
   *   [5] = 15998
   *   [6] = undefined
   *   [7] = undefined
   *   [8] = (15)
   *   [9] = 15
   *  [10] = messages file
   *
   * P4 oabkp01 S 16038/16042(16) backup message
   *   [1] = 4
   *   [2] = oabkp01
   *   [3] = S
   *   [4] = 16038/16042
   *   [5] = undefined
   *   [6] = 16038
   *   [7] = 16042
   *   [8] = (16)
   *   [9] = 16
   *  [10] = backup message
   *
   * the only way to know which one is by checking for undefined's
   */
    a.severity = parseInt($a[1]);
    a.node = $a[2];

    debug('match a = ', $a);

    a.identifier = 'P:' + a.severity + ':' + a.node + ':' + $a[3] + ':' + $a[4];
    logger.info('P' + a.severity + ' match');
    var ten_matches = undefined;

    if ($a[3] == 'S') {
      var $b;
      /*
       * FTP of /data2/backup/xeibpr03-new1/opt.dmp.gz to dmsprd2 ok local is 3375251896 remote is 3375251896. 23:13
       */
      if (($b = $lines[0].match(/^FTP of (\S+) to (\S+) (\w+) local is (\d+) remote is (\d+)/))) {
        logger.info('FTP match');
        a.node_alias = $b[2];
        a.alert_key = $b[5]; //remote file size
        a.identifier += ':FTP' + $b[1] + ':' + $b[2] + ':' + $b[3];

        a.summary = 'FTP ' + $b[1] + ' to ' + $b[2] + ' ' + $b[3];

        if ($b[3] == 'ok') a.severity = 0;
        else a.severity = 3;

        if (parseInt($b[4]) != parseInt($b[5])) {
          a.severity = 4;
          a.summary('FTP size mismatch on ' + $b[1]);
        }
      }
    }

    if ($a[10] == 'messages file') {
      /*
       * check for something that looks like a syslog style message embedded in the body of the message
       */
      for (var l in $lines) {
        var $line = $lines[l];
        debug('Parsing line', $line);
        if ($line.length == 0) {
          logger.debug('Empty messages line in body');
          continue;
        }
        var $bb;
        if (($bb = $line.match(/(\/var\/(adm|log)\/messages): (.*)$/))) {
          logger.debug('Found a syslog message in email body: ' + inspect($bb[3]));

          if ($bb[3].match(/^not open for tail/)) {
            a.summary('logfile ' + $bb[1] + ' not available');
          } else syslog.rules(a, $bb[3]);
        } else {
          syslog.rules(a, $line);
        }
      }
    } else if ($a[10] == 'backup message') {
      var $b;

      a.identifier += ':backup';
      a.alert_group = 'Backups';

      // Backup of xeibpr03-new1:/var succeeded 22:07
      if (($b = $lines[0].match(/^Backup of (\S+) (\w+)/))) {
        var $c = $b[1].split(':');
        a.node_alias = $c[0];
        a.alert_key = $c[1];

        a.identifier += ':' + $b[1] + ':' + $b[2];
        a.summary = 'Backup of ' + $b[1];

        if ($b[2] == 'succeeded') {
          a.summary += ' OK';
          a.severity = 1;
        } else {
          a.summary += ' Failed';
          a.severity = 4;
        }
      }
    } else if ($a[10] == 'low idle cpu') {
      var $b;
      a.alert_group = 'CPU';
      a.identifier = 'idlecpu:';
      a.severity = 3;
      if (($b = $lines[1].match(/^(\w+): IdleCpu=(\d+)%\. It is below the desired threshold (\d+)/))) {
        a.node = $b[1];
        a.identifier += a.node;
        a.summary = 'Low idle CPU ' + $b[2] + ' below ' + $b[3];
      }
    } else if ($a[10] == 'Page down ADSL') {
      a.identifier += ':dsldown';
      a.alert_group = 'network';
      a.summary = $a[10];
    } else if ($a[10] == 'messages file not being read and/or written') {
      a.identifier += ':msgnotread';
      a.severity = 1;
      a.summary = 'messages file not being read and/or written';
    } else if ((ten_matches = $a[10].match(/(\w+): Filesystem (.*) is (\d+)% full/))) {
      var mnt = ten_matches[2];
      a.alert_key = mnt;
      a.alert_group = 'df';
      a.identifier += 'df:' + mnt;
      a.summary = 'Filesystem ' + mnt + ' is ' + ten_matches[3] + '% full';
    } else if ((ten_matches = $a[10].match(/(.*): only (\d+) MB of free memory\. \(Treshold=(\d+)\)/))) {
      a.summary = 'Free memory ' + ten_matches[2] + ' below threshold';
      a.alert_group = 'freemem';
    } else {
      logger.debug('unhandled');
      debug('var a', $a);
      //process.exit(1);
    }
  } else if (($a = $subject.match(/([\w\-]+): (Domain processor unavailable)/))) {
  /*
  else if( $a = $subject.match( /^P(\d) ([\w\-]+) ([SG]) (\d+)\((\d+)\) (.*)/ ) )
  {
    a.severity = parseInt( $a[1] );
    a.node = $a[2];
    a.identifier = "P:" + a.node + ":" + $a[3] + ":" + $a[4];
    logger.info( "P" + a.severity + " match" );
  }
*/
    a.severity = 5;
    a.node = $a[1];
    a.summary = $a[2];
    a.identifier = 'DPU:' + $a[1];
    a.alert_group = 'DPU';

    a.type = 'down';
    logger.info('DPU: ' + a.node + ' match');
  } else if (($a = $subject.match(/^windows logs \((\d+)\)/))) {
    /*
     * e.g.
     * Subject: windows logs (33152)
     */

    a.identifier = 'winlog:';
    /* we need to look inside the email body for these messages */
    for (var l in $lines) {
      var $b;
      if (($b = $lines[l].match(/^([A-Z]\w+):[\.]+(\w+)/))) {
        switch ($b[1]) {
          case 'Hostname':
            a.node = $b[2];
            a.identifier += a.node + ':';
            break;

          case 'Source':
            a.alert_group = $b[2];
            a.identifier += a.alert_group + ':';
            break;

          case 'Type':
            switch ($b[2]) {
              case 'Error':
                a.severity = 5;
                break;
            }
            break;
          case 'Event code':
            a.alert_key = $b[2];
            a.identifier = $b[2];
            break;
        }
      } else if (
        ($b = $lines[l].match(/The name "(.*)" could not be registered on the Interface with IP address (.*)./))
      ) {
        a.node_alias = $b[2];
        a.summary = 'Failed to register ' + $b[1] + ' on interface ' + $b[2];
      } else if (($b = $lines[l].match(/^End Backup of '(\w+):' 'Warnings or errors were encountered.'/))) {
        a.summary = 'warnings on backup of drive ' + $b[1];
        a.identifier += 'Backups';
        a.severity = 4;
        a.alert_key = $b[1];
        a.alert_group = 'Backups';
      } else if (($b = $lines[l].match(/.*shadow copies of volume (\w+): were aborted (.*)/))) {
        a.summary = $lines[l];
        a.alert_key = $b[1];
        a.identifier += 'shadowaborted';
        a.alert_group = 'Backups';
      }
    }
  } else if (($a = $subject.match(/^status of the rsync for important data from (\w+) to (\w+) \((\d+)\)/))) {
    a.node = $a[1];
    a.node_alias = $a[2];

    for (var i in $lines) {
      if (($b = $lines[i].match(/(.*) returned (\d+) at (.*)/))) {
        if ($b[2] != 0) a.severity = 4;
      }
    }
    logger.info('rsync important match');
  } else if (($a = $subject.match(/RMAN Backup for (\w+) instance/))) {
    a.customer = $a[1];
    a.alert_group = 'oracle';
    a.identifier = 'RMANbackup:' + a.customer + ':';

    if (($b = $lines[0].match(/RMAN ([\w_]+) (\w+) for orac10g/))) {
      a.identifier += $b[1] + ':' + $b[2];

      if ($b[2] === 'OK') a.severity = 1;
      else a.severity = 3;
    } else logger.error('Failed RMAN match');

    logger.trace('RMAN: lines = ' + inspect($lines));
  } else if (($a = $subject.match(/^\((\d+)\) \[SiteScope (\S+) via external_squid on (\S+)\] (.*)/))) {
    a.node = $a[3];
    a.node_alias = $a[2];
    a.summary = $subject;
    a.identifier = 'SS:squid:' + a.node + ':' + a.node_alias;
  } else if (($a = $subject.match(/^\((\d+)\) \[SiteScope URL: (\S+) \((\S+)\)\] Down OA_(\d+)/))) {
    a.node = $a[3];
    a.severity = 5;
    a.external_id = $a[4];
    a.identifier = 'SS:' + a.node + ':down';
  } else if (($a = $subject.match(/^Ofsted csv transfer from (\S+)/))) {
    a.customer = 'Ofsted';
    a.node = $a[1];
    a.identifier = 'csv:' + $a[1];
  } else if (($a = $subject.match(/^Ofsted - Report import script error \((\d+)\)/))) {
    a.customer = 'Ofsted';
    a.external_id = $a[1];
    a.identifier = 'OA:' + a.external_id;
    for (var i in $lines) {
      if ($lines[i].match(/(.*): Email alerts failure./)) {
        a.summary = 'Ofsted email alerts failure';
      }
    }
  } else if (($a = $subject.match(/(\w+): One or More Schools Added or Missing today - Check (\S+)/))) {
    a.customer = 'Ofsted';
    a.node = $a[1];
    a.alert_key = $a[2];
    a.identifier = 'missingschools:' + a.node;
  } else if (($a = $subject.match(/^\((\d+)\) monitor on ezpublish (\w+) \((\d+)\)/))) {
    var $b;
    a.alert_group = 'sql';
    a.customer = 'Ofsted';
    if (($b = $lines[0].match(/sql-connections=(\d+) \(threshold=(\d+)\)/))) {
      var over = parseInt($b[1]) - parseInt($b[2]);
      a.alert_key = over;
      a.summary = 'Too many SQL connections on ezpublish ' + $b[1] + ' (allowed: ' + $b[2] + ', over: ' + over + ')';
    }
    a.identifier = 'ezpub:sqlcon:' + $a[2];
  } else if (($a = $subject.match(/\((\d+)\) \[SiteScope Tablespace: (.*) on (.*)\]/))) {
    logger.info('table space match');
    a.node = $a[3];
    a.summary = 'Tablespace ' + $a[2] + ' on ' + $a[3];
    a.identifier = 'SSTable:' + $a[1] + ':' + $a[2] + ':' + $a[3];
  } else if (($a = $subject.match(/\((\d+)\) \[SiteScope Locked table count\] (.*)\/(.*)/))) {
    a.node = $a[2];
    a.summary = 'mysqld locked tables';
    a.alert_group = 'database';
    a.severity = 4;
    a.identifier = 'SSlockedtab:' + a.node + ':' + $a[3];
  } else if (($a = $subject.match(/^(START|BZIP|CP|END): (\w+) (.*)/))) {
    /*
     * gprod backups
     */
    a.node = $a[2];
    a.alert_group = 'Backups';
    a.customer = 'SUNW';
    a.identifier = a.customer + ':' + a.alert_group + ':' + $a[1];
    a.summary = $a[3];

    switch ($a[3]) {
      case 'backup starting':
      case 'compressing backup':
      case 'backup about to copy':
        a.severity = 2;
        break;
      case 'backup completed':
        var $b;
        a.severity = 1;

        if (($b = $lines[0].match(/^File: (\S+) copied to (.*)/))) {
          a.alert_key = $b[2];
        }
        break;
    }
  } else if (($a = $subject.match(/^\*\* (\w+) Service Alert: (.*) \*\*$/))) {
    /*
     * nagios events - currently only NEF
     */
    a.agent = 'Nagios';
    a.customer = 'NEF';
    var $b;
    var service = '';
    var state = '';
    if (($b = $a[2].match(/(\S+)\/(.*)/))) {
      a.node = $b[1];
      a.summary = $b[2];
    }
    for (var i in $lines) {
      var $c;
      if (($c = $lines[i].match(/^Service: (.*)/))) {
        service = $c[1];
      } else if (($c = $lines[i].match(/^Host: (.*)/))) {
        a.node = $c[1];
      } else if (($c = $lines[i].match(/^Address: (.*)/))) {
        a.node_alias = $c[1];
      } else if (($c = $lines[i].match(/^State: (.*)/))) {
        state = $c[1];
        switch (state) {
          case 'CRITICAL':
            a.severity = 5;
            break;
          case 'WARNING':
            a.severity = 4;
            break;
          case 'OK':
            a.severity = 1;
            break;
        }
      }
    }
    a.identifier = 'nagios:' + a.node + ':' + service + ':' + state;
  } else if (($a = $subject.match(/(\w+): (\w+) pipe down restarting at (.*)/))) {
    a.node = $a[2];
    a.summary = 'pipe down - restarting at ' + $a[3];
    a.identifier = $a[1] + ':' + $a[2] + ':pipedownrestart';
  } else if (($a = $subject.match(/raid disk error \((\d+)\)/))) {
    a.external_id = $a[1];
    if ($lines.length > 0) {
      var $b;
      if (($b = $lines[0].match(/(\S+) ckraid.sh (\S+) problem/))) {
        a.severity = 5;
        a.node = $b[1];
        a.alert_key = $b[2];
        a.summary = 'raid disk error ';
        a.identifier = 'raiderror:' + a.node + ':' + $b[2];
      }
    }
  } else if (($a = $subject.match(/(\d+) SiteScope on (\S+) OK (\d+:\d+)/))) {
    a.node = $a[2];
    a.identifier = 'SS:OK:' + $a[1] + ':' + $a[2];
    a.summary = 'SiteScope OK on ' + a.node;
    a.severity = 0;
  }
  //hlvbp001: 36614 OA_UPS_3 MAINS FAILURE (powerout) 05:25
  else if (($a = $subject.match(/^(\w+): (\d+) (\S+) MAINS (BACK|FAILURE) /))) {
    a.alert_group = 'UPS';
    a.external_id = $a[2];
    a.node = $a[1];
    a.identifier = 'UPS:' + $a[1] + ':' + $a[4];
    if ($a[4] == 'BACK') a.severity = 1;
    else if ($a[4] == 'FAILURE') a.severity = 5;
    else a.severity = 3;

    a.summary = 'UPS ' + $a[4] + ' on ' + a.node;
  } else if (($a = $subject.match(/^(\w+): (\d+)$/))) {
    a.node = $a[1];
    a.external_id = $a[2];
    if ($lines.length > 0) a.summary = $lines[0];

    var $b;
    if (($b = $lines[0].match(/^(\S+) (([\w\.]+):(\d+)) Proxy down/))) {
      a.severity = 4;
      a.node_alias = $b[1];
      a.identifier = 'proxydown:' + $b[1] + ':' + $b[2];
      a.summary = 'Proxy down ' + $b[2];
    } else if (($b = $lines[0].match(/(\S+) testvpn.sh: no conn to (\S+) (.*)/))) {
      a.summary = 'VPN down ' + $b[1] + ' -> ' + $b[2];
      a.severity = 5;
      a.alert_key = $b[2];
      a.identifier = 'vpndown:' + a.node + ':' + a.alert_key;
    } else if (($b = $lines[0].match(/^SiteScope (\S+) down /))) {
      a.node = $b[1];
      a.severity = 5;
      a.summary = 'Site down: ' + a.node;
      a.identifier = 'sitedown:' + a.node;
    }
  } else if (($a = $subject.match(/^\((\d+)\) racoon.log (.*)/))) {
  /*
   * e.g.
   * (50001) racoon.log VPN error: 2011-09-23 14:40:44: ERROR: Cannot record event: event queue overflow
   */
    a.alert_group = 'VPN';
    if ($a[2].match(/VPN error: .*/)) {
      a.severity = 4;
    }

    if (($b = $a[2].match(/.*ERROR: (.*)/))) {
      a.summary = $b[1];
    }
  } //only for debugging
  else {
    logger.warn('subject: ' + $subject);
    logger.warn('BODY: ' + inspect($body));
  }

  /*
   * convert hostname to a customer
   */
  if (a.customer == undefined && a.node != undefined) {
    if (a.node.match(/(nef|NEF)/)) a.customer = 'Bloomberg';
    else if (a.node.match(/^(oaxgs|OAXGS|xei)/)) a.customer = 'XEROX';
    else if (a.node.match(/^(oa|OA|burton)/)) a.customer = 'Open Answers';
    else if (a.node.match(/^gprod/)) a.customer = 'SUNW';
    else if (a.node.match(/^(gatekeeper|CM)/)) a.customer = 'RoyalC';
    else if (a.node.match(/^(ofsted|www\.safeguardingchildren\.org\.uk)/)) a.customer = 'Ofsted';
    else if (a.node.match(/^libadu/)) a.customer = 'Jimmo';
    else if (a.node.match(/^accounts-2/)) a.customer = 'BDB Law';
    else if (a.node.match(/^(bl)/)) a.customer = 'Camelot';
    else if (a.node.match(/^(bwpop|bwsv|bwfg|bxen|blmg|bwmg|bwsg|bwdc|blut|bwut|bwsv|bwhb|bwcs)/))
      a.customer = 'Camelot';
  }
};
