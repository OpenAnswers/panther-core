// Generated by CoffeeScript 1.10.0
(function() {
  var BadRequestError, CertificateError, EmailError, HttpError, NotImplementedError, QueryError, SocketError, SocketMsgError, ValidationError, codes, self,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  self = this;

  SocketError = (function(superClass) {
    extend(SocketError, superClass);

    SocketError.prototype.name = 'SocketError';

    function SocketError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, SocketError);
      }
      this.name = 'SocketError';
    }

    return SocketError;

  })(Error);

  this.SocketError = SocketError;

  SocketMsgError = (function(superClass) {
    extend(SocketMsgError, superClass);

    SocketMsgError.prototype.name = 'SocketMsgError';

    function SocketMsgError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, SocketMsgError);
      }
      this.name = 'SocketMsgError';
    }

    return SocketMsgError;

  })(Error);

  this.SocketMsgError = SocketMsgError;

  QueryError = (function(superClass) {
    extend(QueryError, superClass);

    QueryError.prototype.name = 'QueryError';

    function QueryError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, QueryError);
      }
      this.name = 'QueryError';
    }

    return QueryError;

  })(Error);

  this.QueryError = QueryError;

  ValidationError = (function(superClass) {
    extend(ValidationError, superClass);

    ValidationError.prototype.name = 'ValidationError';

    function ValidationError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, ValidationError);
      }
      this.name = 'ValidationError';
      if (!options) {
        return;
      }
      if (options.code) {
        this.code = options.code;
      }
      if (options.field) {
        this.field = options.field;
      }
      if (options.format) {
        this.format = options.format;
      }
      if (options.type) {
        this.type = options.type;
      }
    }

    return ValidationError;

  })(Error);

  this.ValidationError = ValidationError;

  BadRequestError = (function(superClass) {
    extend(BadRequestError, superClass);

    BadRequestError.prototype.name = 'BadRequestError';

    function BadRequestError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, BadRequestError);
      }
      this.name = 'BadRequestError';
    }

    return BadRequestError;

  })(Error);

  this.BadRequestError = BadRequestError;

  NotImplementedError = (function(superClass) {
    extend(NotImplementedError, superClass);

    NotImplementedError.prototype.name = 'NotImplementedError';

    function NotImplementedError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, NotImplementedError);
      }
      this.name = 'NotImplementedError';
    }

    return NotImplementedError;

  })(Error);

  this.NotImplementedError = NotImplementedError;

  CertificateError = (function(superClass) {
    extend(CertificateError, superClass);

    CertificateError.prototype.name = 'CertificateError';

    function CertificateError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, CertificateError);
      }
    }

    return CertificateError;

  })(Error);

  this.CertificateError = CertificateError;

  EmailError = (function(superClass) {
    extend(EmailError, superClass);

    EmailError.prototype.name = 'EmailError';

    function EmailError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, EmailError);
      }
    }

    return EmailError;

  })(Error);

  this.EmailError = EmailError;

  HttpError = (function(superClass) {
    extend(HttpError, superClass);

    HttpError.prototype.name = 'HttpError';

    function HttpError(message, options) {
      this.message = message;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, HttpError);
      }
      this.name = 'HttpError';
      if (!options) {
        return;
      }
      if (options.code) {
        this.code = options.code;
      }
    }

    return HttpError;

  })(Error);

  this.HttpError = HttpError;

  codes = [
    {
      400: {
        message: "Bad Request"
      },
      401: {
        message: "Authorization failed"
      },
      404: {
        message: "Not found"
      },
      500: {
        message: "Server Error"
      }
    }
  ];

  this.HttpError404 = (function(superClass) {
    extend(HttpError404, superClass);

    HttpError404.prototype.name = 'HttpError404';

    function HttpError404(detail) {
      this.detail = detail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, HttpError404);
      }
      this.code = 404;
      this.message = "Not Found";
      if (this.detail) {
        this.message += " " + this.detail;
      }
    }

    return HttpError404;

  })(this.HttpError);

  this.HttpError400 = (function(superClass) {
    extend(HttpError400, superClass);

    HttpError400.prototype.name = 'HttpError400';

    function HttpError400(detail) {
      this.detail = detail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, HttpError400);
      }
      this.code = 400;
      this.message = "Bad Request";
      if (this.detail) {
        this.message += " " + this.detail;
      }
    }

    return HttpError400;

  })(this.HttpError);

  this.HttpError401 = (function(superClass) {
    extend(HttpError401, superClass);

    HttpError401.prototype.name = 'HttpError401';

    function HttpError401(detail) {
      this.detail = detail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, HttpError401);
      }
      this.code = 401;
      this.message = "Unauthorised";
      if (this.detail) {
        this.message += " " + this.detail;
      }
    }

    return HttpError401;

  })(this.HttpError);

  this.HttpError500 = (function(superClass) {
    extend(HttpError500, superClass);

    HttpError500.prototype.name = 'HttpError500';

    function HttpError500(detail) {
      this.detail = detail;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, HttpError500);
      }
      this.code = 500;
      this.message = "Server Error";
      if (this.detail) {
        this.message += " " + this.detail;
      }
    }

    return HttpError500;

  })(this.HttpError);

  this.ErrorType = (function() {
    function ErrorType() {}

    ErrorType.types = {
      'SocketError': SocketError,
      'SocketMsgError': SocketMsgError,
      'HttpError': HttpError,
      'ValidationError': ValidationError,
      'BadRequestError': BadRequestError,
      'QueryError': QueryError
    };

    ErrorType.lookup = function(name) {
      return this.types[name];
    };

    ErrorType.from_object = function(error_var) {
      var etype, key, socket_err, value;
      socket_err = null;
      if (typeof error_var === 'object' && error_var.message !== void 0) {
        if (etype = this.lookup(error_var.name)) {
          socket_err = new etype(error_var.message);
        } else {
          socket_err = new Error(error_var.message);
        }
        for (key in error_var) {
          value = error_var[key];
          socket_err[key] = value;
        }
      } else {
        socket_err = new Error(error_var);
      }
      return socket_err;
    };

    return ErrorType;

  })();

}).call(this);

//# sourceMappingURL=errors.js.map
